// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "github.com/k4lii/golang_microservices/accounts/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateAccountEndpoint       endpoint.Endpoint
	DeleteAccountEndpoint       endpoint.Endpoint
	GetSelfAccountEndpoint      endpoint.Endpoint
	UpdateAccountEndpoint       endpoint.Endpoint
	ReadOtherAccountEndpoint    endpoint.Endpoint
	LoginEndpoint               endpoint.Endpoint
	AddToBalanceEndpoint        endpoint.Endpoint
	SusbstractToBalanceEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AccountsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AddToBalanceEndpoint:        MakeAddToBalanceEndpoint(s),
		CreateAccountEndpoint:       MakeCreateAccountEndpoint(s),
		DeleteAccountEndpoint:       MakeDeleteAccountEndpoint(s),
		GetSelfAccountEndpoint:      MakeGetSelfAccountEndpoint(s),
		LoginEndpoint:               MakeLoginEndpoint(s),
		ReadOtherAccountEndpoint:    MakeReadOtherAccountEndpoint(s),
		SusbstractToBalanceEndpoint: MakeSusbstractToBalanceEndpoint(s),
		UpdateAccountEndpoint:       MakeUpdateAccountEndpoint(s),
	}
	for _, m := range mdw["CreateAccount"] {
		eps.CreateAccountEndpoint = m(eps.CreateAccountEndpoint)
	}
	for _, m := range mdw["DeleteAccount"] {
		eps.DeleteAccountEndpoint = m(eps.DeleteAccountEndpoint)
	}
	for _, m := range mdw["GetSelfAccount"] {
		eps.GetSelfAccountEndpoint = m(eps.GetSelfAccountEndpoint)
	}
	for _, m := range mdw["UpdateAccount"] {
		eps.UpdateAccountEndpoint = m(eps.UpdateAccountEndpoint)
	}
	for _, m := range mdw["ReadOtherAccount"] {
		eps.ReadOtherAccountEndpoint = m(eps.ReadOtherAccountEndpoint)
	}
	for _, m := range mdw["Login"] {
		eps.LoginEndpoint = m(eps.LoginEndpoint)
	}
	for _, m := range mdw["AddToBalance"] {
		eps.AddToBalanceEndpoint = m(eps.AddToBalanceEndpoint)
	}
	for _, m := range mdw["SusbstractToBalance"] {
		eps.SusbstractToBalanceEndpoint = m(eps.SusbstractToBalanceEndpoint)
	}
	return eps
}
